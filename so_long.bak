/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   so_long.c                                          :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: mfleury <mfleury@student.42barcelona.com>  +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2024/09/03 21:40:11 by mfleury           #+#    #+#             */
/*   Updated: 2024/09/12 18:00:57 by mfleury          ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "so_long.h"
#define HEIGHT 900
#define WIDTH 1440
#define BPP 4

void	sl_close(void *str)
{
		ft_printf("%s", (char *)str);
		exit(1);
}

void	move_persona(mlx_image_t *img, keys_t key)
{
	if (key == MLX_KEY_DOWN && img->instances->y <= (HEIGHT - 64))
	{
		img->instances->y +=64;
		ft_printf("down\n");
	}
		if (key == MLX_KEY_UP && img->instances->y >= 64)
	{
		img->instances->y -=64;
		ft_printf("up\n");
	}
		if (key == MLX_KEY_LEFT && img->instances->x >= 64)
	{
		img->instances->x -=64;
		ft_printf("left\n");
	}
		if (key == MLX_KEY_RIGHT && img->instances->x <= (WIDTH - 64))
	{
		img->instances->x +=64;
		ft_printf("right\n");
	}
}

void	sl_keyhook(mlx_key_data_t keydata, void *sl)
{
	t_mainwindow	*tmp;

	tmp = (t_mainwindow *)sl;
	if (keydata.key == MLX_KEY_ESCAPE && keydata.action == MLX_PRESS)
		sl_close("Closing with ESC\n");
	if (keydata.key == MLX_KEY_DOWN && keydata.action == MLX_PRESS)
		move_persona(tmp->hero.img, keydata.key);
	if (keydata.key == MLX_KEY_UP && keydata.action == MLX_PRESS)
		move_persona(tmp->hero.img, keydata.key);
	if (keydata.key == MLX_KEY_RIGHT && keydata.action == MLX_PRESS)
		move_persona(tmp->hero.img, keydata.key);
	if (keydata.key == MLX_KEY_LEFT && keydata.action == MLX_PRESS)
		move_persona(tmp->hero.img, keydata.key);
}

void	get_map_size(t_mainwindow *sl, char *path)
{
	char	*tmp;
	
	sl->fd = open(path, O_RDONLY);
	if (sl->fd == -1)
		sl_close("error while opening file\n");
	tmp = get_next_line(sl->fd);
	sl->h_map = 0;
	sl->w_map = ft_strlen(tmp) - 1;
	while (tmp != NULL)
	{
		free(tmp);
		tmp = get_next_line(sl->fd);
		if (tmp != NULL && sl->w_map != (ft_strlen(tmp) - 1))
			sl_close("map is not rectangular");
		sl->h_map++;
	}
	free(tmp);
	tmp = NULL;
	if (close(sl->fd) < 0)
		sl_close("error while closing fd");
}

void	sl_grid_fill(t_grid *grid, t_grid *hero, char *line)
{
	int	i;

	i = 0;
	while (line[i] != '\n')
	{
		if (line[i] != '0' && line[i] != '1')
			if(line[i] !='C' && line[i] != 'E' && line[i] != 'P')
				sl_close("map check: forbidden value");
		if (line[i] == 'P')
		{
			grid[i].value = '0';
			hero->value = line[i];	
		}
		if (line[i] == 'C')
		{
			grid[i].value = '0';
			//collect[0].value = line[i];	
		}
		else
			grid[i].value = line[i];
		i++;	
	}
}

void	sl_map_fill(t_mainwindow *sl, char *path)
{
	char	*line;
	int		i;

	sl->fd = open(path, O_RDONLY);
	if (sl->fd == -1)
		sl_close("error while opening file\n");
	line = get_next_line(sl->fd);
	i = 0;
	sl_grid_fill(sl->grid[i++], &sl->hero, line);
	while (line != NULL)
	{
		free(line);
		line = get_next_line(sl->fd);
		if (line != NULL)
			sl_grid_fill(sl->grid[i++], &sl->hero, line);
	}
	free(line);
	line = NULL;
	if (close(sl->fd) < 0)
		sl_close("error while closing fd");
}

void	sl_map_check_walls(t_grid **grid, unsigned int w, unsigned int h)
{
	unsigned int i;

	i = 0;
	while (i <= w)
		if (grid[0][i].value != '1' || grid[h][i++].value != '1')
			sl_close("map check: missing surrounding walls");
	i = 0;
	while (i <= h)
		if (grid[i][0].value != '1' || grid[i++][w].value != '1')
			sl_close("map check: missing surrounding walls");
}

void	sl_map_check_dups(t_grid **grid, unsigned int w, unsigned int h)
{
	unsigned int i;
	unsigned int j;
	unsigned int cnt[3];

	i = 0;
	j = 0;
	while (j <= 2)
		cnt[j++] = 0;
	while (i <= h && (cnt[0] <= 1 || cnt[1] <= 1))
	{
		j = 0;
		while (j <= w)
		{
			if (grid[i][j].value == 'E')
				cnt[0]++;
			else if (grid[i][j].value == 'P')
				cnt[1]++;
			else if (grid[i][j].value == 'C')
				cnt[2]++;
			j++;
		}
		i++;
	}
	if (cnt[0] > 1 || cnt[1] > 1) // yet missing cnt[2]==0 for collectibles	
		sl_close("map check: duplicate entry or start point");
}

void	sl_load_texture(mlx_t *slx, t_grid *item, char *path)
{
	item->texture = mlx_load_png(path);
	if (item->texture == NULL)
		sl_close("Error");
	item->img = mlx_texture_to_image(slx, item->texture);
	if(mlx_resize_image(item->img, 64, 64) == false)
		sl_close("Error");
	mlx_image_to_window(slx, item->img, 0, 0);
}

int	main(int argc, char *argv[])
{
	t_mainwindow	sl;
	unsigned int	i;
//	unsigned int	j;

	if (argc != 2)
		sl_close("missing argument\n");
	get_map_size(&sl, argv[1]);
	sl.grid = (t_grid **)ft_calloc(sl.h_map + 1, sizeof(t_grid *));
	if (sl.grid == NULL)
		sl_close("error in calloc grid");	
	i = 0;
	while (i <= (sl.h_map + 1))
	{
		sl.grid[i++] = (t_grid *)ft_calloc(sl.w_map, sizeof(t_grid));
		if (sl.grid == NULL)
			sl_close("error in calloc grid[i]");	
	}
	sl.grid[i] = NULL;
	sl_map_fill(&sl, argv[1]);
	sl_map_check_walls(sl.grid, sl.w_map - 1, sl.h_map - 1);
	sl_map_check_dups(sl.grid, sl.w_map - 1, sl.h_map - 1);
	
	//mlx_get_monitor_size(0, &sl.m_width, &sl.m_height);
	sl.m_width = sl.w_map * 64;
	sl.m_height = sl.h_map * 64;
	sl.slx = mlx_init(sl.m_width, sl.m_height, "Test", true);
	if (sl.slx == NULL)
		sl_close("Error");
	
	sl_load_texture(sl.slx, &sl.hero, "textures/animals/ax_bear2.png");
	sl_load_texture(sl.slx, &sl.grid[0][0], "textures/fruits/01.png");
	sl_load_texture(sl.slx, &sl.grid[1][1], "textures/fruits/02.png");
	/*i = 0;
	while (i <= sl.h_map - 1)
	{
		j = 0;
		while (j <= sl.w_map - 1)
		{
			sl_load_texture(sl.slx, &sl.grid[i][j], "textures/fruits/01.png");
			j++;
		}
		i++;
	}*/

	/*sl.hero.texture = mlx_load_png("textures/animals/ax_bear2.png");
	if (sl.hero.texture == NULL)
		sl_close("Error");
	sl.hero.img = mlx_texture_to_image(sl.slx, sl.hero.texture);
	if(mlx_resize_image(sl.hero.img, 64, 64) == false)
		sl_close("Error");
	mlx_image_to_window(sl.slx, sl.hero.img, 0, 0);*/
	mlx_close_hook(sl.slx, sl_close, "Closing\n");	
	mlx_key_hook(sl.slx, &sl_keyhook, &sl);
	mlx_loop(sl.slx);
	sl_close("");
	return (0);
}
